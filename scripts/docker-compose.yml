version: '3'
services:

  flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask
    image: nikolaik/python-nodejs:python3.8-nodejs14-alpine
    restart: unless-stopped
    environment:
      MODE: "deployment"
      SECRET_KEY: {SECRET_KEY}
      APP_ENV: "prod"
      APP_DEBUG: "False"
      APP_PORT: 5000
      MONGODB_DATABASE: flaskdb
      MONGODB_USERNAME: {MONGODB_USERNAME}
      MONGODB_PASSWORD: {MONGODB_PASSWORD}
      MONGODB_HOSTNAME: mongodb
    volumes:
      - {APP_DIR}:/var/www/
      
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: {MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: {MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: flaskdb
      MONGODB_DATA_DIR: /db/data/
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - {DB_DIR}:/db/data/
      - {BASE_DIR}/mongo-init.js:/mongo-init.js
    networks:
      - backend

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: digitalocean.com/webserver:latest
    container_name: webserver
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - {NGINX_DIR}:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local